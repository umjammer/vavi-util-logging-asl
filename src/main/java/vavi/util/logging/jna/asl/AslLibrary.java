package vavi.util.logging.jna.asl;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.PointerByReference;
import java.nio.IntBuffer;
/**
 * JNA Wrapper for library <b>asl</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface AslLibrary extends Library {
	String JNA_LIBRARY_NAME = "AppKit";
	NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(AslLibrary.JNA_LIBRARY_NAME);
	AslLibrary INSTANCE = Native.load(AslLibrary.JNA_LIBRARY_NAME, AslLibrary.class);
	/** <i>native declaration : asl.h</i> */
	int ASL_API_VERSION = 20150225;
	/** <i>native declaration : asl.h</i> */
	int ASL_LEVEL_EMERG = 0;
	/** <i>native declaration : asl.h</i> */
	int ASL_LEVEL_ALERT = 1;
	/** <i>native declaration : asl.h</i> */
	int ASL_LEVEL_CRIT = 2;
	/** <i>native declaration : asl.h</i> */
	int ASL_LEVEL_ERR = 3;
	/** <i>native declaration : asl.h</i> */
	int ASL_LEVEL_WARNING = 4;
	/** <i>native declaration : asl.h</i> */
	int ASL_LEVEL_NOTICE = 5;
	/** <i>native declaration : asl.h</i> */
	int ASL_LEVEL_INFO = 6;
	/** <i>native declaration : asl.h</i> */
	int ASL_LEVEL_DEBUG = 7;
	/** <i>native declaration : asl.h</i> */
	String ASL_STRING_EMERG = "Emergency";
	/** <i>native declaration : asl.h</i> */
	String ASL_STRING_ALERT = "Alert";
	/** <i>native declaration : asl.h</i> */
	String ASL_STRING_CRIT = "Critical";
	/** <i>native declaration : asl.h</i> */
	String ASL_STRING_ERR = "Error";
	/** <i>native declaration : asl.h</i> */
	String ASL_STRING_WARNING = "Warning";
	/** <i>native declaration : asl.h</i> */
	String ASL_STRING_NOTICE = "Notice";
	/** <i>native declaration : asl.h</i> */
	String ASL_STRING_INFO = "Info";
	/** <i>native declaration : asl.h</i> */
	String ASL_STRING_DEBUG = "Debug";
	/** <i>native declaration : asl.h</i> */
	int ASL_QUERY_OP_CASEFOLD = 0x0010;
	/** <i>native declaration : asl.h</i> */
	int ASL_QUERY_OP_PREFIX = 0x0020;
	/** <i>native declaration : asl.h</i> */
	int ASL_QUERY_OP_SUFFIX = 0x0040;
	/** <i>native declaration : asl.h</i> */
	int ASL_QUERY_OP_SUBSTRING = 0x0060;
	/** <i>native declaration : asl.h</i> */
	int ASL_QUERY_OP_NUMERIC = 0x0080;
	/** <i>native declaration : asl.h</i> */
	int ASL_QUERY_OP_REGEX = 0x0100;
	/** <i>native declaration : asl.h</i> */
	int ASL_QUERY_OP_EQUAL = 0x0001;
	/** <i>native declaration : asl.h</i> */
	int ASL_QUERY_OP_GREATER = 0x0002;
	/** <i>native declaration : asl.h</i> */
	int ASL_QUERY_OP_GREATER_EQUAL = 0x0003;
	/** <i>native declaration : asl.h</i> */
	int ASL_QUERY_OP_LESS = 0x0004;
	/** <i>native declaration : asl.h</i> */
	int ASL_QUERY_OP_LESS_EQUAL = 0x0005;
	/** <i>native declaration : asl.h</i> */
	int ASL_QUERY_OP_NOT_EQUAL = 0x0006;
	/** <i>native declaration : asl.h</i> */
	int ASL_QUERY_OP_TRUE = 0x0007;
	/** <i>native declaration : asl.h</i> */
	String ASL_KEY_TIME = "Time";
	/** <i>native declaration : asl.h</i> */
	String ASL_KEY_TIME_NSEC = "TimeNanoSec";
	/** <i>native declaration : asl.h</i> */
	String ASL_KEY_HOST = "Host";
	/** <i>native declaration : asl.h</i> */
	String ASL_KEY_SENDER = "Sender";
	/** <i>native declaration : asl.h</i> */
	String ASL_KEY_FACILITY = "Facility";
	/** <i>native declaration : asl.h</i> */
	String ASL_KEY_PID = "PID";
	/** <i>native declaration : asl.h</i> */
	String ASL_KEY_UID = "UID";
	/** <i>native declaration : asl.h</i> */
	String ASL_KEY_GID = "GID";
	/** <i>native declaration : asl.h</i> */
	String ASL_KEY_LEVEL = "Level";
	/** <i>native declaration : asl.h</i> */
	String ASL_KEY_MSG = "Message";
	/** <i>native declaration : asl.h</i> */
	String ASL_KEY_READ_UID = "ReadUID";
	/** <i>native declaration : asl.h</i> */
	String ASL_KEY_READ_GID = "ReadGID";
	/** <i>native declaration : asl.h</i> */
	String ASL_KEY_EXPIRE_TIME = "ASLExpireTime";
	/** <i>native declaration : asl.h</i> */
	String ASL_KEY_MSG_ID = "ASLMessageID";
	/** <i>native declaration : asl.h</i> */
	String ASL_KEY_SESSION = "Session";
	/** <i>native declaration : asl.h</i> */
	String ASL_KEY_REF_PID = "RefPID";
	/** <i>native declaration : asl.h</i> */
	String ASL_KEY_REF_PROC = "RefProc";
	/** <i>native declaration : asl.h</i> */
	String ASL_KEY_AUX_TITLE = "ASLAuxTitle";
	/** <i>native declaration : asl.h</i> */
	String ASL_KEY_AUX_UTI = "ASLAuxUTI";
	/** <i>native declaration : asl.h</i> */
	String ASL_KEY_AUX_URL = "ASLAuxURL";
	/** <i>native declaration : asl.h</i> */
	String ASL_KEY_AUX_DATA = "ASLAuxData";
	/** <i>native declaration : asl.h</i> */
	String ASL_KEY_OPTION = "ASLOption";
	/** <i>native declaration : asl.h</i> */
	String ASL_KEY_MODULE = "ASLModule";
	/** <i>native declaration : asl.h</i> */
	String ASL_KEY_SENDER_INSTANCE = "SenderInstance";
	/** <i>native declaration : asl.h</i> */
	String ASL_KEY_SENDER_MACH_UUID = "SenderMachUUID";
	/** <i>native declaration : asl.h</i> */
	String ASL_KEY_FINAL_NOTIFICATION = "ASLFinalNotification";
	/** <i>native declaration : asl.h</i> */
	String ASL_KEY_OS_ACTIVITY_ID = "OSActivityID";
	/** <i>native declaration : asl.h</i> */
	long ASL_TYPE_UNDEF = 0xffff_ffffL;
	/** <i>native declaration : asl.h</i> */
	int ASL_TYPE_MSG = 0;
	/** <i>native declaration : asl.h</i> */
	int ASL_TYPE_QUERY = 1;
	/** <i>native declaration : asl.h</i> */
	int ASL_TYPE_LIST = 2;
	/** <i>native declaration : asl.h</i> */
	int ASL_TYPE_FILE = 3;
	/** <i>native declaration : asl.h</i> */
	int ASL_TYPE_STORE = 4;
	/** <i>native declaration : asl.h</i> */
	int ASL_TYPE_CLIENT = 5;
	/** <i>native declaration : asl.h</i> */
	int ASL_MATCH_DIRECTION_FORWARD = 1;
	/** <i>native declaration : asl.h</i> */
	int ASL_MATCH_DIRECTION_REVERSE = -1;
	/** <i>native declaration : asl.h</i> */
	int ASL_FILTER_MASK_EMERG = 0x01;
	/** <i>native declaration : asl.h</i> */
	int ASL_FILTER_MASK_ALERT = 0x02;
	/** <i>native declaration : asl.h</i> */
	int ASL_FILTER_MASK_CRIT = 0x04;
	/** <i>native declaration : asl.h</i> */
	int ASL_FILTER_MASK_ERR = 0x08;
	/** <i>native declaration : asl.h</i> */
	int ASL_FILTER_MASK_WARNING = 0x10;
	/** <i>native declaration : asl.h</i> */
	int ASL_FILTER_MASK_NOTICE = 0x20;
	/** <i>native declaration : asl.h</i> */
	int ASL_FILTER_MASK_INFO = 0x40;
	/** <i>native declaration : asl.h</i> */
	int ASL_FILTER_MASK_DEBUG = 0x80;
	/** <i>native declaration : asl.h</i> */
	int ASL_OPT_STDERR = 0x0000_0001;
	/** <i>native declaration : asl.h</i> */
	int ASL_OPT_NO_DELAY = 0x0000_0002;
	/** <i>native declaration : asl.h</i> */
	int ASL_OPT_NO_REMOTE = 0x0000_0004;
	/** <i>native declaration : asl.h</i> */
	int ASL_OPT_OPEN_WRITE = 0x0000_0001;
	/** <i>native declaration : asl.h</i> */
	int ASL_OPT_CREATE_STORE = 0x0000_0002;
	/** <i>native declaration : asl.h</i> */
	int ASL_LOG_DESCRIPTOR_READ = 1;
	/** <i>native declaration : asl.h</i> */
	int ASL_LOG_DESCRIPTOR_WRITE = 2;
	/** <i>native declaration : asl.h</i> */
	String ASL_MSG_FMT_RAW = "raw";
	/** <i>native declaration : asl.h</i> */
	String ASL_MSG_FMT_STD = "std";
	/** <i>native declaration : asl.h</i> */
	String ASL_MSG_FMT_BSD = "bsd";
	/** <i>native declaration : asl.h</i> */
	String ASL_MSG_FMT_XML = "xml";
	/** <i>native declaration : asl.h</i> */
	String ASL_MSG_FMT_MSG = "msg";
	/** <i>native declaration : asl.h</i> */
	String ASL_TIME_FMT_SEC = "sec";
	/** <i>native declaration : asl.h</i> */
	String ASL_TIME_FMT_UTC = "utc";
	/** <i>native declaration : asl.h</i> */
	String ASL_TIME_FMT_LCL = "lcl";
	/** <i>native declaration : asl.h</i> */
	int ASL_ENCODE_NONE = 0;
	/** <i>native declaration : asl.h</i> */
	int ASL_ENCODE_SAFE = 1;
	/** <i>native declaration : asl.h</i> */
	int ASL_ENCODE_ASL = 2;
	/** <i>native declaration : asl.h</i> */
	int ASL_ENCODE_XML = 3;
	/**
	 * ASL Library SPI - do not call directly<br>
	 * Original signature : <code>int _asl_lib_log(asl_object_t, uint32_t, asl_object_t, const char*, null)</code><br>
	 * <i>native declaration : asl.h:310</i><br>
	 * @deprecated use the safer methods {@link #_asl_lib_log(vavi.util.logging.jna.asl.AslLibrary.asl_object_t, int, vavi.util.logging.jna.asl.AslLibrary.asl_object_t, java.lang.String, java.lang.Object)} and {@link #_asl_lib_log(com.sun.jna.Pointer, int, com.sun.jna.Pointer, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int _asl_lib_log(Pointer client, int eval, Pointer msg, Pointer format, Object... varArgs1);
	/**
	 * ASL Library SPI - do not call directly<br>
	 * Original signature : <code>int _asl_lib_log(asl_object_t, uint32_t, asl_object_t, const char*, null)</code><br>
	 * <i>native declaration : asl.h:310</i>
	 */
	int _asl_lib_log(AslLibrary.asl_object_t client, int eval, AslLibrary.asl_object_t msg, String format, Object... varArgs1);
	/**
	 * Original signature : <code>uint32_t _asl_evaluate_send(asl_object_t, asl_object_t, int)</code><br>
	 * <i>native declaration : asl.h:311</i><br>
	 * @deprecated use the safer methods {@link #_asl_evaluate_send(vavi.util.logging.jna.asl.AslLibrary.asl_object_t, vavi.util.logging.jna.asl.AslLibrary.asl_object_t, int)} and {@link #_asl_evaluate_send(com.sun.jna.Pointer, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int _asl_evaluate_send(Pointer client, Pointer msg, int level);
	/**
	 * Original signature : <code>uint32_t _asl_evaluate_send(asl_object_t, asl_object_t, int)</code><br>
	 * <i>native declaration : asl.h:311</i>
	 */
	int _asl_evaluate_send(AslLibrary.asl_object_t client, AslLibrary.asl_object_t msg, int level);
	/**
	 * Initialize a connection to the ASL server.<br>
	 * This call is optional in many cases.  The library will perform any<br>
	 * necessary initializations on the fly.  A call to asl_open() is required<br>
	 * if optional settings must be made before messages are sent to the server.<br>
	 * These include setting the client filter and managing additional output<br>
	 * file descriptors.  Note that the default setting of the client filter is<br>
	 * ASL_FILTER_MASK_UPTO(ASL_LEVEL_NOTICE), so ASL_LEVEL_DEBUG and ASL_LEVEL_INFO<br>
	 * messages are not sent to the server by default.<br>
	 * A separate client connection is required for multiple threads or<br>
	 * dispatch queues.<br>
	 * Options (defined above) may be set using the opts parameter. They are:<br>
	 *   ASL_OPT_STDERR    - adds stderr as an output file descriptor<br>
	 *   ASL_OPT_NO_REMOTE - disables the remote-control mechanism for adjusting<br>
	 *                       filter levers for processes using e.g. syslog -c ...<br>
	 * @param ident Sender name.<br>
	 * @param facility Facility name.<br>
	 * @param opts Options (see Client Creation Options).<br>
	 * @return an ASL client handle (asl_object_t of type ASL_TYPE_CLIENT).<br>
	 * Original signature : <code>asl_object_t asl_open(const char*, const char*, uint32_t)</code><br>
	 * <i>native declaration : asl.h:341</i><br>
	 * @deprecated use the safer methods {@link #asl_open(java.lang.String, java.lang.String, int)} and {@link #asl_open(com.sun.jna.Pointer, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	AslLibrary.asl_object_t asl_open(Pointer ident, Pointer facility, int opts);
	/**
	 * Initialize a connection to the ASL server.<br>
	 * This call is optional in many cases.  The library will perform any<br>
	 * necessary initializations on the fly.  A call to asl_open() is required<br>
	 * if optional settings must be made before messages are sent to the server.<br>
	 * These include setting the client filter and managing additional output<br>
	 * file descriptors.  Note that the default setting of the client filter is<br>
	 * ASL_FILTER_MASK_UPTO(ASL_LEVEL_NOTICE), so ASL_LEVEL_DEBUG and ASL_LEVEL_INFO<br>
	 * messages are not sent to the server by default.<br>
	 * A separate client connection is required for multiple threads or<br>
	 * dispatch queues.<br>
	 * Options (defined above) may be set using the opts parameter. They are:<br>
	 *   ASL_OPT_STDERR    - adds stderr as an output file descriptor<br>
	 *   ASL_OPT_NO_REMOTE - disables the remote-control mechanism for adjusting<br>
	 *                       filter levers for processes using e.g. syslog -c ...<br>
	 * @param ident Sender name.<br>
	 * @param facility Facility name.<br>
	 * @param opts Options (see Client Creation Options).<br>
	 * @return an ASL client handle (asl_object_t of type ASL_TYPE_CLIENT).<br>
	 * Original signature : <code>asl_object_t asl_open(const char*, const char*, uint32_t)</code><br>
	 * <i>native declaration : asl.h:341</i>
	 */
	AslLibrary.asl_object_t asl_open(String ident, String facility, int opts);
	/**
	 * Open an ASL database or ASL data file for read or write access.<br>
	 * Opens an ASL database if the path specifies a directory, or<br>
	 * an ASL data file if the path specifies a file. Opens the system<br>
	 * ASL database if path is NULL.<br>
	 * If the ASL_OPT_OPEN_READ option is specified, the database or data file may be<br>
	 * searched with asl_search() or asl_match(). asl_next() and asl_prev() may be used<br>
	 * to iterate over the messages in the database or file.<br>
	 * If the ASL_OPT_OPEN_WRITE option is specified, an existing file or database is<br>
	 * opened for writing.  New messages may be added to the file or database using<br>
	 * asl_append(), asl_send(), asl_log(), or asl_vlog().  Existing messages in the<br>
	 * store or file may not be deleted or modified.<br>
	 * If the path does not exist, asl_open_path() will create a new database if<br>
	 * ASL_OPT_CREATE_STORE is set in the options, or a new data file otherwise.<br>
	 * The file will be created with the user's effective UID and GID as owner and<br>
	 * group.  The mode will be 0644.  If a different mode, UID, or GID is desired,<br>
	 * an empty file or directory may be pre-created with the desired settings.<br>
	 * @param path Location of the ASL database or ASL data file in the filesystem.<br>
	 *    A value of NULL may be used to open the system's database.<br>
	 * @param opts Options (see File and Store Open Options).<br>
	 * @return an ASL object of type ASL_TYPE_STORE or ASL_TYPE_FILE, or NULL on failure.<br>
	 * Original signature : <code>asl_object_t asl_open_path(const char*, uint32_t)</code><br>
	 * <i>native declaration : asl.h:372</i><br>
	 * @deprecated use the safer methods {@link #asl_open_path(java.lang.String, int)} and {@link #asl_open_path(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	AslLibrary.asl_object_t asl_open_path(Pointer path, int opts);
	/**
	 * Open an ASL database or ASL data file for read or write access.<br>
	 * Opens an ASL database if the path specifies a directory, or<br>
	 * an ASL data file if the path specifies a file. Opens the system<br>
	 * ASL database if path is NULL.<br>
	 * If the ASL_OPT_OPEN_READ option is specified, the database or data file may be<br>
	 * searched with asl_search() or asl_match(). asl_next() and asl_prev() may be used<br>
	 * to iterate over the messages in the database or file.<br>
	 * If the ASL_OPT_OPEN_WRITE option is specified, an existing file or database is<br>
	 * opened for writing.  New messages may be added to the file or database using<br>
	 * asl_append(), asl_send(), asl_log(), or asl_vlog().  Existing messages in the<br>
	 * store or file may not be deleted or modified.<br>
	 * If the path does not exist, asl_open_path() will create a new database if<br>
	 * ASL_OPT_CREATE_STORE is set in the options, or a new data file otherwise.<br>
	 * The file will be created with the user's effective UID and GID as owner and<br>
	 * group.  The mode will be 0644.  If a different mode, UID, or GID is desired,<br>
	 * an empty file or directory may be pre-created with the desired settings.<br>
	 * @param path Location of the ASL database or ASL data file in the filesystem.<br>
	 *    A value of NULL may be used to open the system's database.<br>
	 * @param opts Options (see File and Store Open Options).<br>
	 * @return an ASL object of type ASL_TYPE_STORE or ASL_TYPE_FILE, or NULL on failure.<br>
	 * Original signature : <code>asl_object_t asl_open_path(const char*, uint32_t)</code><br>
	 * <i>native declaration : asl.h:372</i>
	 */
	AslLibrary.asl_object_t asl_open_path(String path, int opts);
	/**
	 * Shuts down a connection to the server.<br>
	 * This routine is identical to asl_release().<br>
	 * @param obj An ASL object.<br>
	 * Original signature : <code>void asl_close(asl_object_t)</code><br>
	 * <i>native declaration : asl.h:381</i><br>
	 * @deprecated use the safer methods {@link #asl_close(vavi.util.logging.jna.asl.AslLibrary.asl_object_t)} and {@link #asl_close(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void asl_close(Pointer obj);
	/**
	 * Shuts down a connection to the server.<br>
	 * This routine is identical to asl_release().<br>
	 * @param obj An ASL object.<br>
	 * Original signature : <code>void asl_close(asl_object_t)</code><br>
	 * <i>native declaration : asl.h:381</i>
	 */
	void asl_close(AslLibrary.asl_object_t obj);
	/**
	 * Write log messages to the given file descriptor.<br>
	 * Log messages will be written to this file as well as to the server.<br>
	 * This is equivalent to calling:<br>
	 * asl_add_output_file(asl, descriptor, ASL_MSG_FMT_STD, ASL_TIME_FMT_LCL, ASL_FILTER_MASK_UPTO(ASL_LEVEL_DEBUG), ASL_ENCODE_SAFE)<br>
	 * @param client An ASL client handle (asl_object_t of type ASL_TYPE_CLIENT).<br>
	 * @param descriptor A file descriptor.<br>
	 * @return 0 on success, non-zero on failure.<br>
	 * Original signature : <code>int asl_add_log_file(asl_object_t, int)</code><br>
	 * <i>native declaration : asl.h:396</i><br>
	 * @deprecated use the safer methods {@link #asl_add_log_file(vavi.util.logging.jna.asl.AslLibrary.asl_object_t, int)} and {@link #asl_add_log_file(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int asl_add_log_file(Pointer client, int descriptor);
	/**
	 * Write log messages to the given file descriptor.<br>
	 * Log messages will be written to this file as well as to the server.<br>
	 * This is equivalent to calling:<br>
	 * asl_add_output_file(asl, descriptor, ASL_MSG_FMT_STD, ASL_TIME_FMT_LCL, ASL_FILTER_MASK_UPTO(ASL_LEVEL_DEBUG), ASL_ENCODE_SAFE)<br>
	 * @param client An ASL client handle (asl_object_t of type ASL_TYPE_CLIENT).<br>
	 * @param descriptor A file descriptor.<br>
	 * @return 0 on success, non-zero on failure.<br>
	 * Original signature : <code>int asl_add_log_file(asl_object_t, int)</code><br>
	 * <i>native declaration : asl.h:396</i>
	 */
	int asl_add_log_file(AslLibrary.asl_object_t client, int descriptor);
	/**
	 * Write log messages to the given file descriptor.<br>
	 * Log messages will be written to this file as well as to the server.<br>
	 * This routine extends the basic interface offered by asl_add_log_file(),<br>
	 * allowing control of the format used to write log message written to the file.<br>
	 * control of the time zone used when printing time values, and allowing<br>
	 * individual filtering control for each log file.<br>
	 * @param client An ASL client handle (asl_object_t of type ASL_TYPE_CLIENT).<br>
	 * @param fd A file descriptor.<br>
	 * @param mfmt A character string specifying the message format.<br>
	 * @param tfmt A character string specifying the time format.<br>
	 * @param filter A filter value.<br>
	 * @param text_encoding A text encoding type.<br>
	 * @return 0 on success, non-zero on failure.<br>
	 * Original signature : <code>int asl_add_output_file(asl_object_t, int, const char*, const char*, int, int)</code><br>
	 * <i>native declaration : asl.h:421</i><br>
	 * @deprecated use the safer methods {@link #asl_add_output_file(vavi.util.logging.jna.asl.AslLibrary.asl_object_t, int, java.lang.String, java.lang.String, int, int)} and {@link #asl_add_output_file(com.sun.jna.Pointer, int, com.sun.jna.Pointer, com.sun.jna.Pointer, int, int)} instead
	 */
	@Deprecated 
	int asl_add_output_file(Pointer client, int fd, Pointer mfmt, Pointer tfmt, int filter, int text_encoding);
	/**
	 * Write log messages to the given file descriptor.<br>
	 * Log messages will be written to this file as well as to the server.<br>
	 * This routine extends the basic interface offered by asl_add_log_file(),<br>
	 * allowing control of the format used to write log message written to the file.<br>
	 * control of the time zone used when printing time values, and allowing<br>
	 * individual filtering control for each log file.<br>
	 * @param client An ASL client handle (asl_object_t of type ASL_TYPE_CLIENT).<br>
	 * @param fd A file descriptor.<br>
	 * @param mfmt A character string specifying the message format.<br>
	 * @param tfmt A character string specifying the time format.<br>
	 * @param filter A filter value.<br>
	 * @param text_encoding A text encoding type.<br>
	 * @return 0 on success, non-zero on failure.<br>
	 * Original signature : <code>int asl_add_output_file(asl_object_t, int, const char*, const char*, int, int)</code><br>
	 * <i>native declaration : asl.h:421</i>
	 */
	int asl_add_output_file(AslLibrary.asl_object_t client, int fd, String mfmt, String tfmt, int filter, int text_encoding);
	/**
	 * Write log messages to the given file descriptor.<br>
	 * Sets or changes a filter value for filtering messages written to a file associated<br>
	 * with an ASL client handle using asl_add_output_file() or asl_add_log_file(). <br>
	 * @param client An ASL client handle (asl_object_t of type ASL_TYPE_CLIENT).<br>
	 * @param fd A file descriptor.<br>
	 * @param filter A filter value.<br>
	 * @return the previous filter value.<br>
	 * Original signature : <code>int asl_set_output_file_filter(asl_object_t, int, int)</code><br>
	 * <i>native declaration : asl.h:437</i><br>
	 * @deprecated use the safer methods {@link #asl_set_output_file_filter(vavi.util.logging.jna.asl.AslLibrary.asl_object_t, int, int)} and {@link #asl_set_output_file_filter(com.sun.jna.Pointer, int, int)} instead
	 */
	@Deprecated 
	int asl_set_output_file_filter(Pointer client, int fd, int filter);
	/**
	 * Write log messages to the given file descriptor.<br>
	 * Sets or changes a filter value for filtering messages written to a file associated<br>
	 * with an ASL client handle using asl_add_output_file() or asl_add_log_file(). <br>
	 * @param client An ASL client handle (asl_object_t of type ASL_TYPE_CLIENT).<br>
	 * @param fd A file descriptor.<br>
	 * @param filter A filter value.<br>
	 * @return the previous filter value.<br>
	 * Original signature : <code>int asl_set_output_file_filter(asl_object_t, int, int)</code><br>
	 * <i>native declaration : asl.h:437</i>
	 */
	int asl_set_output_file_filter(AslLibrary.asl_object_t client, int fd, int filter);
	/**
	 * Stop writing log messages to the given file descriptor.<br>
	 * The file descriptor is not closed by this routine.<br>
	 * @param client An ASL client handle (asl_object_t of type ASL_TYPE_CLIENT).<br>
	 * @param fd A file descriptor.<br>
	 * @return 0 on success, non-zero on failure.<br>
	 * Original signature : <code>int asl_remove_log_file(asl_object_t, int)</code><br>
	 * <i>native declaration : asl.h:449</i><br>
	 * @deprecated use the safer methods {@link #asl_remove_log_file(vavi.util.logging.jna.asl.AslLibrary.asl_object_t, int)} and {@link #asl_remove_log_file(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int asl_remove_log_file(Pointer client, int descriptor);
	/**
	 * Stop writing log messages to the given file descriptor.<br>
	 * The file descriptor is not closed by this routine.<br>
	 * @param client An ASL client handle (asl_object_t of type ASL_TYPE_CLIENT).<br>
	 * @param descriptor A file descriptor.<br>
	 * @return 0 on success, non-zero on failure.<br>
	 * Original signature : <code>int asl_remove_log_file(asl_object_t, int)</code><br>
	 * <i>native declaration : asl.h:449</i>
	 */
	int asl_remove_log_file(AslLibrary.asl_object_t client, int descriptor);
	/**
	 * Set a filter for messages being sent to the server.<br>
	 * The filter is a bitmask representing priorities.  The ASL_FILTER_MASK<br>
	 * macro may be used to convert a priority level into a bitmask for that<br>
	 * level.  The ASL_FILTER_MASK_UPTO macro creates a bitmask for all<br>
	 * priorities up to and including a given priority.<br>
	 * Messages with priority levels that do not have a corresponding bit <br>
	 * set in the filter are not sent to the server, although they will be<br>
	 * sent to any file descriptors added with asl_add_log_file().<br>
	 * The default setting is ASL_FILTER_MASK_UPTO(ASL_LEVEL_NOTICE).<br>
	 * Returns the previous filter value.<br>
	 * @param client An ASL client handle (asl_object_t of type ASL_TYPE_CLIENT).<br>
	 * @param f A filter value.<br>
	 * @return the previous filter value.<br>
	 * Original signature : <code>int asl_set_filter(asl_object_t, int)</code><br>
	 * <i>native declaration : asl.h:469</i><br>
	 * @deprecated use the safer methods {@link #asl_set_filter(vavi.util.logging.jna.asl.AslLibrary.asl_object_t, int)} and {@link #asl_set_filter(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int asl_set_filter(Pointer client, int f);
	/**
	 * Set a filter for messages being sent to the server.<br>
	 * The filter is a bitmask representing priorities.  The ASL_FILTER_MASK<br>
	 * macro may be used to convert a priority level into a bitmask for that<br>
	 * level.  The ASL_FILTER_MASK_UPTO macro creates a bitmask for all<br>
	 * priorities up to and including a given priority.<br>
	 * Messages with priority levels that do not have a corresponding bit <br>
	 * set in the filter are not sent to the server, although they will be<br>
	 * sent to any file descriptors added with asl_add_log_file().<br>
	 * The default setting is ASL_FILTER_MASK_UPTO(ASL_LEVEL_NOTICE).<br>
	 * Returns the previous filter value.<br>
	 * @param client An ASL client handle (asl_object_t of type ASL_TYPE_CLIENT).<br>
	 * @param f A filter value.<br>
	 * @return the previous filter value.<br>
	 * Original signature : <code>int asl_set_filter(asl_object_t, int)</code><br>
	 * <i>native declaration : asl.h:469</i>
	 */
	int asl_set_filter(AslLibrary.asl_object_t client, int f);
	/**
	 * Examine attribute keys.<br>
	 * @param msg An ASL message or query (asl_object_t of type ASL_TYPE_MSG or ASL_TYPE_QUERY).<br>
	 * @param n An index value.<br>
	 * @return the key of the nth attribute in a message (beginning at zero),<br>
	 * or NULL if n is greater than the largest message index.<br>
	 * Original signature : <code>char* asl_key(asl_object_t, uint32_t)</code><br>
	 * <i>native declaration : asl.h:481</i><br>
	 * @deprecated use the safer methods {@link #asl_key(vavi.util.logging.jna.asl.AslLibrary.asl_object_t, int)} and {@link #asl_key(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	String asl_key(Pointer msg, int n);
	/**
	 * Examine attribute keys.<br>
	 * @param msg An ASL message or query (asl_object_t of type ASL_TYPE_MSG or ASL_TYPE_QUERY).<br>
	 * @param n An index value.<br>
	 * @return the key of the nth attribute in a message (beginning at zero),<br>
	 * or NULL if n is greater than the largest message index.<br>
	 * Original signature : <code>char* asl_key(asl_object_t, uint32_t)</code><br>
	 * <i>native declaration : asl.h:481</i>
	 */
	String asl_key(AslLibrary.asl_object_t msg, int n);
	/**
	 * Examine attribute keys.<br>
	 * @param msg An ASL message or query (asl_object_t of type ASL_TYPE_MSG or ASL_TYPE_QUERY). (output) key at the given index.  May be NULL.<br>
	 * @param val (output) val at the given index.  May be NULL.<br>
	 * @param op (output) op at the given index.  May be NULL.<br>
	 * @param n An index value.<br>
	 * @return 0 for success, non-zero for failure.<br>
	 * Original signature : <code>int asl_fetch_key_val_op(asl_object_t, uint32_t, const char**, const char**, uint32_t*)</code><br>
	 * <i>native declaration : asl.h:498</i><br>
	 * @deprecated use the safer methods {@link #asl_fetch_key_val_op(vavi.util.logging.jna.asl.AslLibrary.asl_object_t, int, java.lang.String[], java.lang.String[], java.nio.IntBuffer)} and {@link #asl_fetch_key_val_op(com.sun.jna.Pointer, int, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int asl_fetch_key_val_op(Pointer msg, int n, PointerByReference key, PointerByReference val, IntByReference op);
	/**
	 * Examine attribute keys.<br>
	 * @param msg An ASL message or query (asl_object_t of type ASL_TYPE_MSG or ASL_TYPE_QUERY).<br>
	 * @param key (output) key at the given index.  May be NULL.<br>
	 * @param val (output) val at the given index.  May be NULL.<br>
	 * @param op (output) op at the given index.  May be NULL.<br>
	 * @param n An index value.<br>
	 * @return 0 for success, non-zero for failure.<br>
	 * Original signature : <code>int asl_fetch_key_val_op(asl_object_t, uint32_t, const char**, const char**, uint32_t*)</code><br>
	 * <i>native declaration : asl.h:498</i>
	 */
	int asl_fetch_key_val_op(AslLibrary.asl_object_t msg, int n, String key[], String val[], IntBuffer op);
	/**
	 * Create a new log message, query message, message list, or a connection to the system database.<br>
	 * @param type ASL_TYPE_MSG, ASL_TYPE_QUERY, ASL_TYPE_LIST, or ASL_TYPE_CLIENT.<br>
	 * @return a newly allocated asl_object_t of the specified type.<br>
	 * @discussion<br>
	 *    New objects of type ASL_TYPE_CLIENT will be created with default settings for <br>
	 *    a client connection, equivalent to asl_open(NULL, NULL, 0).<br>
	 *    The Sender and Facility values associated with an ASL_TYPE_CLIENT may<br>
	 *    be reset using asl_set().<br>
	 * Original signature : <code>asl_object_t asl_new(uint32_t)</code><br>
	 * <i>native declaration : asl.h:513</i>
	 */
	AslLibrary.asl_object_t asl_new(int type);
	/**
	 * Set or re-set a message or query attribute.<br>
	 * May also be used to set values associated with an ASL_TYPE_CLIENT object,<br>
	 * such as Sender and Facility.<br>
	 * @param obj An ASL object of type ASL_TYPE_MSG, ASL_TYPE_QUERY, or ASL_TYPE_CLIENT.<br>
	 * @param key Attribute key.<br>
	 * @param value Attribute value.<br>
	 * @return 0 for success, non-zero for failure.<br>
	 * Original signature : <code>int asl_set(asl_object_t, const char*, const char*)</code><br>
	 * <i>native declaration : asl.h:528</i><br>
	 * @deprecated use the safer methods {@link #asl_set(vavi.util.logging.jna.asl.AslLibrary.asl_object_t, java.lang.String, java.lang.String)} and {@link #asl_set(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int asl_set(Pointer obj, Pointer key, Pointer value);
	/**
	 * Set or re-set a message or query attribute.<br>
	 * May also be used to set values associated with an ASL_TYPE_CLIENT object,<br>
	 * such as Sender and Facility.<br>
	 * @param obj An ASL object of type ASL_TYPE_MSG, ASL_TYPE_QUERY, or ASL_TYPE_CLIENT.<br>
	 * @param key Attribute key.<br>
	 * @param value Attribute value.<br>
	 * @return 0 for success, non-zero for failure.<br>
	 * Original signature : <code>int asl_set(asl_object_t, const char*, const char*)</code><br>
	 * <i>native declaration : asl.h:528</i>
	 */
	int asl_set(AslLibrary.asl_object_t obj, String key, String value);
	/**
	 * Remove a key/value attribute.<br>
	 * @param obj An ASL object of type ASL_TYPE_MSG, ASL_TYPE_QUERY, or ASL_TYPE_CLIENT.<br>
	 * @param key Attribute key.<br>
	 * returns 0 for success, non-zero for failure.<br>
	 * Original signature : <code>int asl_unset(asl_object_t, const char*)</code><br>
	 * <i>native declaration : asl.h:539</i><br>
	 * @deprecated use the safer methods {@link #asl_unset(vavi.util.logging.jna.asl.AslLibrary.asl_object_t, java.lang.String)} and {@link #asl_unset(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int asl_unset(Pointer obj, Pointer key);
	/**
	 * Remove a key/value attribute.<br>
	 * @param obj An ASL object of type ASL_TYPE_MSG, ASL_TYPE_QUERY, or ASL_TYPE_CLIENT.<br>
	 * @param key Attribute key.<br>
	 * returns 0 for success, non-zero for failure.<br>
	 * Original signature : <code>int asl_unset(asl_object_t, const char*)</code><br>
	 * <i>native declaration : asl.h:539</i>
	 */
	int asl_unset(AslLibrary.asl_object_t obj, String key);
	/**
	 * Get the value associated with an attribute key.<br>
	 * @param obj An ASL object of type ASL_TYPE_MSG, ASL_TYPE_QUERY, or ASL_TYPE_CLIENT.<br>
	 * @param key Attribute key.<br>
	 * @return the attribute value, or NULL if the object does not contain the key.<br>
	 * Original signature : <code>char* asl_get(asl_object_t, const char*)</code><br>
	 * <i>native declaration : asl.h:550</i><br>
	 * @deprecated use the safer methods {@link #asl_get(vavi.util.logging.jna.asl.AslLibrary.asl_object_t, java.lang.String)} and {@link #asl_get(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	String asl_get(Pointer msg, Pointer key);
	/**
	 * Get the value associated with an attribute key.<br>
	 * @param obj An ASL object of type ASL_TYPE_MSG, ASL_TYPE_QUERY, or ASL_TYPE_CLIENT.<br>
	 * @param key Attribute key.<br>
	 * @return the attribute value, or NULL if the object does not contain the key.<br>
	 * Original signature : <code>char* asl_get(asl_object_t, const char*)</code><br>
	 * <i>native declaration : asl.h:550</i>
	 */
	String asl_get(AslLibrary.asl_object_t msg, String key);
	/**
	 * Log a message with a particular log level.<br>
	 * @param obj An asl_object_t or NULL.<br>
	 * @param msg An asl_object_t of type ASL_TYPE_MSG (default attributes will be supplied if msg is NULL).<br>
	 * @param level Log level (ASL_LEVEL_DEBUG to ASL_LEVEL_EMERG).<br>
	 * @param format A printf() - style format string followed by a list of arguments.<br>
	 * @return 0 for success, non-zero for failure.<br>
	 * @discussion<br>
	 *    The input object may be of any type.<br>
	 *    In typical usage, obj is of type ASL_TYPE_CLIENT or obj is NULL.<br>
	 *    NULL causes the library to use the default ASL client handle.<br>
	 *    This routine prepares a message for tranmission to the ASL server daemon (syslogd),<br>
	 *    The message is sent to the server subject to filter settings.  The message may also<br>
	 *    be formatted and printed to various output files.<br>
	 *    For ASL_TYPE_MSG, this routine will set all key/value pairs in the input object as<br>
	 *    they would appear if the message were being sent to the server.  This includes<br>
	 *    setting alues for ASL_KEY_TIME, ASL_KEY_TIME_NSEC, ASL_KEY_HOST, and so on.<br>
	 *    If the object is of type ASL_TYPE_STORE or ASL_TYPE_FILE, a message will be <br>
	 *    constructed (as above) and saved in the file or data store.  No filtering is done.<br>
	 *    If obj is of type ASL_TYPE_LIST, a message is created and appended to the list.<br>
	 *    The object type ASL_TYPE_QUERY is supported, but the key/value pairs set in the<br>
	 *    object will have an operator value of zero.<br>
	 * Original signature : <code>int asl_log(asl_object_t, asl_object_t, int, const char*, null)</code><br>
	 * <i>native declaration : asl.h:585</i><br>
	 * @deprecated use the safer methods {@link #asl_log(vavi.util.logging.jna.asl.AslLibrary.asl_object_t, vavi.util.logging.jna.asl.AslLibrary.asl_object_t, int, java.lang.String, java.lang.Object)} and {@link #asl_log(com.sun.jna.Pointer, com.sun.jna.Pointer, int, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int asl_log(Pointer client, Pointer msg, int level, Pointer format, Object... varArgs1);
	/**
	 * Log a message with a particular log level.<br>
	 * @param obj An asl_object_t or NULL.<br>
	 * @param msg An asl_object_t of type ASL_TYPE_MSG (default attributes will be supplied if msg is NULL).<br>
	 * @param level Log level (ASL_LEVEL_DEBUG to ASL_LEVEL_EMERG).<br>
	 * @param format A printf() - style format string followed by a list of arguments.<br>
	 * @return 0 for success, non-zero for failure.<br>
	 * @discussion<br>
	 *    The input object may be of any type.<br>
	 *    In typical usage, obj is of type ASL_TYPE_CLIENT or obj is NULL.<br>
	 *    NULL causes the library to use the default ASL client handle.<br>
	 *    This routine prepares a message for tranmission to the ASL server daemon (syslogd),<br>
	 *    The message is sent to the server subject to filter settings.  The message may also<br>
	 *    be formatted and printed to various output files.<br>
	 *    For ASL_TYPE_MSG, this routine will set all key/value pairs in the input object as<br>
	 *    they would appear if the message were being sent to the server.  This includes<br>
	 *    setting alues for ASL_KEY_TIME, ASL_KEY_TIME_NSEC, ASL_KEY_HOST, and so on.<br>
	 *    If the object is of type ASL_TYPE_STORE or ASL_TYPE_FILE, a message will be <br>
	 *    constructed (as above) and saved in the file or data store.  No filtering is done.<br>
	 *    If obj is of type ASL_TYPE_LIST, a message is created and appended to the list.<br>
	 *    The object type ASL_TYPE_QUERY is supported, but the key/value pairs set in the<br>
	 *    object will have an operator value of zero.<br>
	 * Original signature : <code>int asl_log(asl_object_t, asl_object_t, int, const char*, null)</code><br>
	 * <i>native declaration : asl.h:585</i>
	 */
	int asl_log(AslLibrary.asl_object_t client, AslLibrary.asl_object_t msg, int level, String format, Object... varArgs1);
	/**
	 * Log a message with a particular log level.<br>
	 * This API is a simplified version of asl_log().  It uses the default (NULL) ASL client handle,<br>
	 * and does not have a msg parameter to supply additonal key/value pairs to be attached to the<br>
	 * message sent to the syslogd server.<br>
	 * @param level Log level (ASL_LEVEL_DEBUG to ASL_LEVEL_EMERG).<br>
	 * @param format A printf() - style format string followed by a list of arguments.<br>
	 * @return 0 for success, non-zero for failure.<br>
	 * Original signature : <code>int asl_log_message(int, const char*, null)</code><br>
	 * <i>native declaration : asl.h:600</i><br>
	 * @deprecated use the safer methods {@link #asl_log_message(int, java.lang.String, java.lang.Object)} and {@link #asl_log_message(int, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int asl_log_message(int level, Pointer format, Object... varArgs1);
	/**
	 * Log a message with a particular log level.<br>
	 * This API is a simplified version of asl_log().  It uses the default (NULL) ASL client handle,<br>
	 * and does not have a msg parameter to supply additonal key/value pairs to be attached to the<br>
	 * message sent to the syslogd server.<br>
	 * @param level Log level (ASL_LEVEL_DEBUG to ASL_LEVEL_EMERG).<br>
	 * @param format A printf() - style format string followed by a list of arguments.<br>
	 * @return 0 for success, non-zero for failure.<br>
	 * Original signature : <code>int asl_log_message(int, const char*, null)</code><br>
	 * <i>native declaration : asl.h:600</i>
	 */
	int asl_log_message(int level, String format, Object... varArgs1);
	/**
	 * Log a message with a particular log level.<br>
	 * Similar to asl_log, but takes a va_list argument.<br>
	 * @param asl An ASL object or NULL.<br>
	 * @param msg An asl_object_t of type ASL_TYPE_MSG (default attributes will be supplied if msg is NULL).<br>
	 * @param level Log level (ASL_LEVEL_DEBUG to ASL_LEVEL_EMERG).<br>
	 * @param format A printf() - style format string followed by a list of arguments.<br>
	 * @param ap A va_list containing the values for the format string.<br>
	 * @return 0 for success, non-zero for failure.<br>
	 * @discussion <br>
	 *    See the discussion for asl_log() for a description of how this routine treats different<br>
	 *    types of input object.<br>
	 * Original signature : <code>int asl_vlog(asl_object_t, asl_object_t, int, const char*, va_list)</code><br>
	 * <i>native declaration : asl.h:622</i><br>
	 * @deprecated use the safer methods {@link #asl_vlog(vavi.util.logging.jna.asl.AslLibrary.asl_object_t, vavi.util.logging.jna.asl.AslLibrary.asl_object_t, int, java.lang.String, java.lang.Object)} and {@link #asl_vlog(com.sun.jna.Pointer, com.sun.jna.Pointer, int, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	int asl_vlog(Pointer obj, Pointer msg, int level, Pointer format, Object... ap);
	/**
	 * Log a message with a particular log level.<br>
	 * Similar to asl_log, but takes a va_list argument.<br>
	 * @param asl An ASL object or NULL.<br>
	 * @param msg An asl_object_t of type ASL_TYPE_MSG (default attributes will be supplied if msg is NULL).<br>
	 * @param level Log level (ASL_LEVEL_DEBUG to ASL_LEVEL_EMERG).<br>
	 * @param format A printf() - style format string followed by a list of arguments.<br>
	 * @param ap A va_list containing the values for the format string.<br>
	 * @return 0 for success, non-zero for failure.<br>
	 * @discussion <br>
	 *    See the discussion for asl_log() for a description of how this routine treats different<br>
	 *    types of input object.<br>
	 * Original signature : <code>int asl_vlog(asl_object_t, asl_object_t, int, const char*, va_list)</code><br>
	 * <i>native declaration : asl.h:622</i>
	 */
	int asl_vlog(AslLibrary.asl_object_t obj, AslLibrary.asl_object_t msg, int level, String format, Object... ap);
	/**
	 * Log a message.<br>
	 * This routine may be used instead of asl_log() or asl_vlog() if asl_set() <br>
	 * has been used to set all of a message's attributes.<br>
	 * @param obj An ASL object or NULL.<br>
	 * @param msg An asl_object_t of type ASL_TYPE_MSG.<br>
	 * @return 0 for success, non-zero for failure.<br>
	 * @discussion<br>
	 *    See the discussion for asl_log() for a description of how this routine treats different<br>
	 *    types of input object.<br>
	 * Original signature : <code>int asl_send(asl_object_t, asl_object_t)</code><br>
	 * <i>native declaration : asl.h:639</i><br>
	 * @deprecated use the safer methods {@link #asl_send(vavi.util.logging.jna.asl.AslLibrary.asl_object_t, vavi.util.logging.jna.asl.AslLibrary.asl_object_t)} and {@link #asl_send(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int asl_send(Pointer obj, Pointer msg);
	/**
	 * Log a message.<br>
	 * This routine may be used instead of asl_log() or asl_vlog() if asl_set() <br>
	 * has been used to set all of a message's attributes.<br>
	 * @param obj An ASL object or NULL.<br>
	 * @param msg An asl_object_t of type ASL_TYPE_MSG.<br>
	 * @return 0 for success, non-zero for failure.<br>
	 * @discussion<br>
	 *    See the discussion for asl_log() for a description of how this routine treats different<br>
	 *    types of input object.<br>
	 * Original signature : <code>int asl_send(asl_object_t, asl_object_t)</code><br>
	 * <i>native declaration : asl.h:639</i>
	 */
	int asl_send(AslLibrary.asl_object_t obj, AslLibrary.asl_object_t msg);
	/**
	 * DEPRECATED: Free an ASL object and all internal resources associated with it.<br>
	 * This routine is identical to asl_release(), which should be used instead.<br>
	 * Note that we don't issue a deprecation warning - yet.<br>
	 * @param obj An ASL object to free.<br>
	 * Original signature : <code>void asl_free(asl_object_t)</code><br>
	 * <i>native declaration : asl.h:649</i><br>
	 * @deprecated use the safer methods {@link #asl_free(vavi.util.logging.jna.asl.AslLibrary.asl_object_t)} and {@link #asl_free(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void asl_free(Pointer obj);
	/**
	 * DEPRECATED: Free an ASL object and all internal resources associated with it.<br>
	 * This routine is identical to asl_release(), which should be used instead.<br>
	 * Note that we don't issue a deprecation warning - yet.<br>
	 * @param obj An ASL object to free.<br>
	 * Original signature : <code>void asl_free(asl_object_t)</code><br>
	 * <i>native declaration : asl.h:649</i>
	 */
	void asl_free(AslLibrary.asl_object_t obj);
	/**
	 * Increment the internal reference count of an ASL object.<br>
	 * @param obj An ASL object to retain.<br>
	 * @return the object.<br>
	 * Original signature : <code>asl_object_t asl_retain(asl_object_t)</code><br>
	 * <i>native declaration : asl.h:658</i><br>
	 * @deprecated use the safer methods {@link #asl_retain(vavi.util.logging.jna.asl.AslLibrary.asl_object_t)} and {@link #asl_retain(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	AslLibrary.asl_object_t asl_retain(Pointer obj);
	/**
	 * Increment the internal reference count of an ASL object.<br>
	 * @param obj An ASL object to retain.<br>
	 * @return the object.<br>
	 * Original signature : <code>asl_object_t asl_retain(asl_object_t)</code><br>
	 * <i>native declaration : asl.h:658</i>
	 */
	AslLibrary.asl_object_t asl_retain(AslLibrary.asl_object_t obj);
	/**
	 * Decrement the internal reference count of an ASL object.<br>
	 * Frees the object when the reference count becomes zero.<br>
	 * @param obj An ASL object to release.<br>
	 * Original signature : <code>void asl_release(asl_object_t)</code><br>
	 * <i>native declaration : asl.h:667</i><br>
	 * @deprecated use the safer methods {@link #asl_release(vavi.util.logging.jna.asl.AslLibrary.asl_object_t)} and {@link #asl_release(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void asl_release(Pointer obj);
	/**
	 * Decrement the internal reference count of an ASL object.<br>
	 * Frees the object when the reference count becomes zero.<br>
	 * @param obj An ASL object to release.<br>
	 * Original signature : <code>void asl_release(asl_object_t)</code><br>
	 * <i>native declaration : asl.h:667</i>
	 */
	void asl_release(AslLibrary.asl_object_t obj);
	/**
	 * Get the internal type of an ASL object.<br>
	 * @param obj An ASL object.<br>
	 * @return the object type.<br>
	 * Original signature : <code>uint32_t asl_get_type(asl_object_t)</code><br>
	 * <i>native declaration : asl.h:676</i><br>
	 * @deprecated use the safer methods {@link #asl_get_type(vavi.util.logging.jna.asl.AslLibrary.asl_object_t)} and {@link #asl_get_type(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int asl_get_type(Pointer obj);
	/**
	 * Get the internal type of an ASL object.<br>
	 * @param obj An ASL object.<br>
	 * @return the object type.<br>
	 * Original signature : <code>uint32_t asl_get_type(asl_object_t)</code><br>
	 * <i>native declaration : asl.h:676</i>
	 */
	int asl_get_type(AslLibrary.asl_object_t obj);
	/**
	 * Set arbitrary parameters of a query.<br>
	 * This is similar to asl_set, but allows richer query operations.<br>
	 * See ASL_QUERY_OP_* above.<br>
	 * @param msg An ASL object of type ASL_TYPE_QUERY.<br>
	 * @param key Attribute key <br>
	 * @param value Attribute value<br>
	 * @param op An operation (ASL_QUERY_OP_*)<br>
	 * @return 0 for success, non-zero for failure<br>
	 * Original signature : <code>int asl_set_query(asl_object_t, const char*, const char*, uint32_t)</code><br>
	 * <i>native declaration : asl.h:693</i><br>
	 * @deprecated use the safer methods {@link #asl_set_query(vavi.util.logging.jna.asl.AslLibrary.asl_object_t, java.lang.String, java.lang.String, int)} and {@link #asl_set_query(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int asl_set_query(Pointer msg, Pointer key, Pointer value, int op);
	/**
	 * Set arbitrary parameters of a query.<br>
	 * This is similar to asl_set, but allows richer query operations.<br>
	 * See ASL_QUERY_OP_* above.<br>
	 * @param msg An ASL object of type ASL_TYPE_QUERY.<br>
	 * @param key Attribute key <br>
	 * @param value Attribute value<br>
	 * @param op An operation (ASL_QUERY_OP_*)<br>
	 * @return 0 for success, non-zero for failure<br>
	 * Original signature : <code>int asl_set_query(asl_object_t, const char*, const char*, uint32_t)</code><br>
	 * <i>native declaration : asl.h:693</i>
	 */
	int asl_set_query(AslLibrary.asl_object_t msg, String key, String value, int op);
	/**
	 * Search for messages matching the criteria described by an query object.<br>
	 * The caller should set the attributes to match using asl_set_query() or asl_set().<br>
	 * The operation ASL_QUERY_OP_EQUAL is used for attributes set with asl_set().<br>
	 * @param obj An ASL object to search.<br>
	 * @param query An asl_object_t of type ASL_TYPE_QUERY or ASL_TYPE_MSG.<br>
	 *            query may be NULL, which matches anything.<br>
	 * @return an ASL object containing messages matching the query, or NULL if there are no matches.<br>
	 * @discussion<br>
	 *    The object to search may be of any type.<br>
	 *    ASL_TYPE_CLIENT searches the main ASL database.<br>
	 *    ASL_TYPE_STORE searches an ASL database in the filesystem.<br>
	 *    ASL_TYPE_FILE searches an ASL data file in the filesystem.<br>
	 *    ASL_TYPE_LIST searches for matches in a list of messages.<br>
	 *    A NULL query matches anything.<br>
	 *    If obj is of type ASL_TYPE_MSG and query is of type ASL_TYPE_QUERY, obj is matched against the query,<br>
	 *    and a list containing the "obj" object is returned if the match succeeds.<br>
	 *    If both obj and query are objects of type ASL_TYPE_MSG or both are of type ASL_TYPE_QUERY,<br>
	 *    they are tested for exact match. A list containing the "obj" object is returned if the match is exact.<br>
	 *    If obj is of type ASL_TYPE_QUERY and query is of type ASL_TYPE_MSG, the routine returns NULL.<br>
	 * Original signature : <code>asl_object_t asl_search(asl_object_t, asl_object_t)</code><br>
	 * <i>native declaration : asl.h:725</i><br>
	 * @deprecated use the safer methods {@link #asl_search(vavi.util.logging.jna.asl.AslLibrary.asl_object_t, vavi.util.logging.jna.asl.AslLibrary.asl_object_t)} and {@link #asl_search(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	AslLibrary.asl_object_t asl_search(Pointer obj, Pointer query);
	/**
	 * Search for messages matching the criteria described by an query object.<br>
	 * The caller should set the attributes to match using asl_set_query() or asl_set().<br>
	 * The operation ASL_QUERY_OP_EQUAL is used for attributes set with asl_set().<br>
	 * @param obj An ASL object to search.<br>
	 * @param query An asl_object_t of type ASL_TYPE_QUERY or ASL_TYPE_MSG.<br>
	 *            query may be NULL, which matches anything.<br>
	 * @return an ASL object containing messages matching the query, or NULL if there are no matches.<br>
	 * @discussion<br>
	 *    The object to search may be of any type.<br>
	 *    ASL_TYPE_CLIENT searches the main ASL database.<br>
	 *    ASL_TYPE_STORE searches an ASL database in the filesystem.<br>
	 *    ASL_TYPE_FILE searches an ASL data file in the filesystem.<br>
	 *    ASL_TYPE_LIST searches for matches in a list of messages.<br>
	 *    A NULL query matches anything.<br>
	 *    If obj is of type ASL_TYPE_MSG and query is of type ASL_TYPE_QUERY, obj is matched against the query,<br>
	 *    and a list containing the "obj" object is returned if the match succeeds.<br>
	 *    If both obj and query are objects of type ASL_TYPE_MSG or both are of type ASL_TYPE_QUERY,<br>
	 *    they are tested for exact match. A list containing the "obj" object is returned if the match is exact.<br>
	 *    If obj is of type ASL_TYPE_QUERY and query is of type ASL_TYPE_MSG, the routine returns NULL.<br>
	 * Original signature : <code>asl_object_t asl_search(asl_object_t, asl_object_t)</code><br>
	 * <i>native declaration : asl.h:725</i>
	 */
	AslLibrary.asl_object_t asl_search(AslLibrary.asl_object_t obj, AslLibrary.asl_object_t query);
	/**
	 * DEPRECATED: Iterate over messages in an asl_object_t (same as an aslresponse).<br>
	 * This routine is identical to asl_next().<br>
	 * @param list An asl_object_t (aslresponse).<br>
	 * @return the next message contained in an ASL object, or NULL when there are no more messages.<br>
	 * @discussion<br>
	 *    This routine is deprecated in favor of asl_next().<br>
	 * Original signature : <code>asl_object_t aslresponse_next(asl_object_t)</code><br>
	 * <i>native declaration : asl.h:738</i><br>
	 * @deprecated use the safer methods {@link #aslresponse_next(vavi.util.logging.jna.asl.AslLibrary.asl_object_t)} and {@link #aslresponse_next(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	AslLibrary.asl_object_t aslresponse_next(Pointer obj);
	/**
	 * DEPRECATED: Iterate over messages in an asl_object_t (same as an aslresponse).<br>
	 * This routine is identical to asl_next().<br>
	 * @param list An asl_object_t (aslresponse).<br>
	 * @return the next message contained in an ASL object, or NULL when there are no more messages.<br>
	 * @discussion<br>
	 *    This routine is deprecated in favor of asl_next().<br>
	 * Original signature : <code>asl_object_t aslresponse_next(asl_object_t)</code><br>
	 * <i>native declaration : asl.h:738</i>
	 */
	AslLibrary.asl_object_t aslresponse_next(AslLibrary.asl_object_t obj);
	/**
	 * DEPRECATED: Free an asl_object_t.<br>
	 * This routine is identical to asl_release().<br>
	 * @param list An asl_object_t (aslresponse).<br>
	 * @discussion<br>
	 *    This routine is deprecated in favor of asl_release().<br>
	 * Original signature : <code>void aslresponse_free(asl_object_t)</code><br>
	 * <i>native declaration : asl.h:750</i><br>
	 * @deprecated use the safer methods {@link #aslresponse_free(vavi.util.logging.jna.asl.AslLibrary.asl_object_t)} and {@link #aslresponse_free(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void aslresponse_free(Pointer obj);
	/**
	 * DEPRECATED: Free an asl_object_t.<br>
	 * This routine is identical to asl_release().<br>
	 * @param list An asl_object_t (aslresponse).<br>
	 * @discussion<br>
	 *    This routine is deprecated in favor of asl_release().<br>
	 * Original signature : <code>void aslresponse_free(asl_object_t)</code><br>
	 * <i>native declaration : asl.h:750</i>
	 */
	void aslresponse_free(AslLibrary.asl_object_t obj);
	/**
	 * Append messages to an object of type ASL_TYPE_LIST.  The input "obj"<br>
	 * parameter may be of type ASL_TYPE_MSG or ASL_TYPE_QUERY, in which case<br>
	 * the object is appended to the list, or "obj" may be of type ASL_TYPE_LIST,<br>
	 * in which case each object in that list is appended to the "list" object.<br>
	 * Does nothing if either list or obj are NULL.<br>
	 * @param obj An object of type ASLTYPE_CLIENT or ASL_TYPE_LIST, or an object of type<br>
	 *    ASL_TYPE_FILE or ASL_TYPE_STORE that is open for write operations.<br>
	 * @param obj_to_add An object of type ASL_TYPE_MSG, ASL_TYPE_QUERY or type ASL_TYPE_LIST.<br>
	 * Original signature : <code>void asl_append(asl_object_t, asl_object_t)</code><br>
	 * <i>native declaration : asl.h:765</i><br>
	 * @deprecated use the safer methods {@link #asl_append(vavi.util.logging.jna.asl.AslLibrary.asl_object_t, vavi.util.logging.jna.asl.AslLibrary.asl_object_t)} and {@link #asl_append(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void asl_append(Pointer obj, Pointer obj_to_add);
	/**
	 * Append messages to an object of type ASL_TYPE_LIST.  The input "obj"<br>
	 * parameter may be of type ASL_TYPE_MSG or ASL_TYPE_QUERY, in which case<br>
	 * the object is appended to the list, or "obj" may be of type ASL_TYPE_LIST,<br>
	 * in which case each object in that list is appended to the "list" object.<br>
	 * Does nothing if either list or obj are NULL.<br>
	 * @param obj An object of type ASLTYPE_CLIENT or ASL_TYPE_LIST, or an object of type<br>
	 *    ASL_TYPE_FILE or ASL_TYPE_STORE that is open for write operations.<br>
	 * @param obj_to_add An object of type ASL_TYPE_MSG, ASL_TYPE_QUERY or type ASL_TYPE_LIST.<br>
	 * Original signature : <code>void asl_append(asl_object_t, asl_object_t)</code><br>
	 * <i>native declaration : asl.h:765</i>
	 */
	void asl_append(AslLibrary.asl_object_t obj, AslLibrary.asl_object_t obj_to_add);
	/**
	 * Prepend messages to an object of type ASL_TYPE_LIST.  The input "obj"<br>
	 * parameter may be of type ASL_TYPE_MSG or ASL_TYPE_QUERY, in which case<br>
	 * the object is prepended to the list, or "obj" may be of type ASL_TYPE_LIST,<br>
	 * in which case each object in that list is prepended to the "list" object.<br>
	 * Does nothing if either list or obj are NULL.<br>
	 * @param obj An object of type ASL_TYPE_LIST.<br>
	 * @param obj_to_add An object of type ASL_TYPE_MSG, ASL_TYPE_QUERY or type ASL_TYPE_LIST.<br>
	 * Original signature : <code>void asl_prepend(asl_object_t, asl_object_t)</code><br>
	 * <i>native declaration : asl.h:779</i><br>
	 * @deprecated use the safer methods {@link #asl_prepend(vavi.util.logging.jna.asl.AslLibrary.asl_object_t, vavi.util.logging.jna.asl.AslLibrary.asl_object_t)} and {@link #asl_prepend(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void asl_prepend(Pointer obj, Pointer obj_to_add);
	/**
	 * Prepend messages to an object of type ASL_TYPE_LIST.  The input "obj"<br>
	 * parameter may be of type ASL_TYPE_MSG or ASL_TYPE_QUERY, in which case<br>
	 * the object is prepended to the list, or "obj" may be of type ASL_TYPE_LIST,<br>
	 * in which case each object in that list is prepended to the "list" object.<br>
	 * Does nothing if either list or obj are NULL.<br>
	 * @param obj An object of type ASL_TYPE_LIST.<br>
	 * @param obj_to_add An object of type ASL_TYPE_MSG, ASL_TYPE_QUERY or type ASL_TYPE_LIST.<br>
	 * Original signature : <code>void asl_prepend(asl_object_t, asl_object_t)</code><br>
	 * <i>native declaration : asl.h:779</i>
	 */
	void asl_prepend(AslLibrary.asl_object_t obj, AslLibrary.asl_object_t obj_to_add);
	/**
	 * Get the number of key/value pairs in an object of type ASL_TYPE_MSG or ASL_TYPE_QUERY,<br>
	 * or the number of components in an object of type ASL_TYPE_LIST.<br>
	 * @param obj An asl_object_t of type ASL_TYPE_MSG, ASL_TYPE_QUERY, or ASL_TYPE_LIST.<br>
	 * @result The number of components in the object.<br>
	 *    Returns zero if object is empty or NULL, or if the type is not<br>
	 *    ASL_TYPE_MSG, ASL_TYPE_QUERY, or ASL_TYPE_LIST.<br>
	 * Original signature : <code>size_t asl_count(asl_object_t)</code><br>
	 * <i>native declaration : asl.h:791</i><br>
	 * @deprecated use the safer methods {@link #asl_count(vavi.util.logging.jna.asl.AslLibrary.asl_object_t)} and {@link #asl_count(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int asl_count(Pointer obj);
	/**
	 * Get the number of key/value pairs in an object of type ASL_TYPE_MSG or ASL_TYPE_QUERY,<br>
	 * or the number of components in an object of type ASL_TYPE_LIST.<br>
	 * @param obj An asl_object_t of type ASL_TYPE_MSG, ASL_TYPE_QUERY, or ASL_TYPE_LIST.<br>
	 * @result The number of components in the object.<br>
	 *    Returns zero if object is empty or NULL, or if the type is not<br>
	 *    ASL_TYPE_MSG, ASL_TYPE_QUERY, or ASL_TYPE_LIST.<br>
	 * Original signature : <code>size_t asl_count(asl_object_t)</code><br>
	 * <i>native declaration : asl.h:791</i>
	 */
	int asl_count(AslLibrary.asl_object_t obj);
	/**
	 * Retreive a message from an object of type ASL_TYPE_LIST.<br>
	 * @param obj An asl_object_t of type ASL_TYPE_LIST<br>
	 * @return the message (an object of type ASL_TYPE_MSG or ASL_TYPE_QUERY) at the specified index.<br>
	 *    Returns NULL if the index is out of range or if list is not an object of type ASL_TYPE_LIST.<br>
	 * Original signature : <code>asl_object_t asl_get_index(asl_object_t, size_t)</code><br>
	 * <i>native declaration : asl.h:801</i><br>
	 * @deprecated use the safer methods {@link #asl_get_index(vavi.util.logging.jna.asl.AslLibrary.asl_object_t, int)} and {@link #asl_get_index(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	AslLibrary.asl_object_t asl_get_index(Pointer list, int index);
	/**
	 * Retreive a message from an object of type ASL_TYPE_LIST.<br>
	 * @param obj An asl_object_t of type ASL_TYPE_LIST<br>
	 * @return the message (an object of type ASL_TYPE_MSG or ASL_TYPE_QUERY) at the specified index.<br>
	 *    Returns NULL if the index is out of range or if list is not an object of type ASL_TYPE_LIST.<br>
	 * Original signature : <code>asl_object_t asl_get_index(asl_object_t, size_t)</code><br>
	 * <i>native declaration : asl.h:801</i>
	 */
	AslLibrary.asl_object_t asl_get_index(AslLibrary.asl_object_t list, int index);
	/**
	 * Remove the message at a specified index from an object of type ASL_TYPE_LIST.<br>
	 * @param list An object of type ASL_TYPE_LIST.<br>
	 * Original signature : <code>void asl_remove_index(asl_object_t, size_t)</code><br>
	 * <i>native declaration : asl.h:809</i><br>
	 * @deprecated use the safer methods {@link #asl_remove_index(vavi.util.logging.jna.asl.AslLibrary.asl_object_t, int)} and {@link #asl_remove_index(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	void asl_remove_index(Pointer list, int index);
	/**
	 * Remove the message at a specified index from an object of type ASL_TYPE_LIST.<br>
	 * @param list An object of type ASL_TYPE_LIST.<br>
	 * Original signature : <code>void asl_remove_index(asl_object_t, size_t)</code><br>
	 * <i>native declaration : asl.h:809</i>
	 */
	void asl_remove_index(AslLibrary.asl_object_t list, int index);
	/**
	 * Creates an auxiliary file that may be used to save arbitrary data.  The ASL message msg<br>
	 * will be saved at the time that the auxiliary file is closed with asl_close_auxiliary_file().<br>
	 * The log entry will include any keys and values found in msg, and it will include the title<br>
	 * and Uniform Type Identifier specified.  If NULL is supplied as a value for the uti parameter,<br>
	 * the type "public.data" is used.  Console.app will display a hyperlink to the file.<br>
	 * Output parameter out_descriptor will contain a readable and writable file descriptor for the new<br>
	 * auxiliary file. <br>
	 * By default, the file will be world-readable.  If the message contains a ReadUID and/or a<br>
	 * ReadGID key, then the values for those keys will determine read access to the file.<br>
	 * The file will be deleted at the same time that the message expires from the ASL data store.<br>
	 * The aslmanager utility manages message expiry.  If msg contains a value for ASLExpireTime,<br>
	 * then the message and the file will not be deleted before that time.  The value may be in<br>
	 * seconds after the Epoch, or it may be ctime() format, e.g "Thu Jun 24 18:22:48 2010".<br>
	 * <br>
	 * @param msg An object of type ASL_TYPE_MSG.<br>
	 * @param tite A title string for the file.<br>
	 * @param uti Uniform Type Identifier for the file.<br>
	 * @param out_descriptor (output) A writable file descriptor.<br>
	 * @return 0 for success, non-zero for failure<br>
	 * Original signature : <code>int asl_create_auxiliary_file(asl_object_t, const char*, const char*, int*)</code><br>
	 * <i>native declaration : asl.h:838</i><br>
	 * @deprecated use the safer methods {@link #asl_create_auxiliary_file(vavi.util.logging.jna.asl.AslLibrary.asl_object_t, java.lang.String, java.lang.String, java.nio.IntBuffer)} and {@link #asl_create_auxiliary_file(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int asl_create_auxiliary_file(Pointer msg, Pointer title, Pointer uti, IntByReference out_descriptor);
	/**
	 * Creates an auxiliary file that may be used to save arbitrary data.  The ASL message msg<br>
	 * will be saved at the time that the auxiliary file is closed with asl_close_auxiliary_file().<br>
	 * The log entry will include any keys and values found in msg, and it will include the title<br>
	 * and Uniform Type Identifier specified.  If NULL is supplied as a value for the uti parameter,<br>
	 * the type "public.data" is used.  Console.app will display a hyperlink to the file.<br>
	 * Output parameter out_descriptor will contain a readable and writable file descriptor for the new<br>
	 * auxiliary file. <br>
	 * By default, the file will be world-readable.  If the message contains a ReadUID and/or a<br>
	 * ReadGID key, then the values for those keys will determine read access to the file.<br>
	 * The file will be deleted at the same time that the message expires from the ASL data store.<br>
	 * The aslmanager utility manages message expiry.  If msg contains a value for ASLExpireTime,<br>
	 * then the message and the file will not be deleted before that time.  The value may be in<br>
	 * seconds after the Epoch, or it may be ctime() format, e.g "Thu Jun 24 18:22:48 2010".<br>
	 * <br>
	 * @param msg An object of type ASL_TYPE_MSG.<br>
	 * @param tite A title string for the file.<br>
	 * @param uti Uniform Type Identifier for the file.<br>
	 * @param out_descriptor (output) A writable file descriptor.<br>
	 * @return 0 for success, non-zero for failure<br>
	 * Original signature : <code>int asl_create_auxiliary_file(asl_object_t, const char*, const char*, int*)</code><br>
	 * <i>native declaration : asl.h:838</i>
	 */
	int asl_create_auxiliary_file(AslLibrary.asl_object_t msg, String title, String uti, IntBuffer out_descriptor);
	/**
	 * Close an auxiliary file opened by asl_create_auxiliary_file() when writing is complete.<br>
	 * syslogd will log the message provided to asl_create_auxiliary_file() when this routine<br>
	 * is called.<br>
	 * @param descriptor The file descriptor<br>
	 * @return 0 for success, non-zero for failure<br>
	 * Original signature : <code>int asl_close_auxiliary_file(int)</code><br>
	 * <i>native declaration : asl.h:849</i>
	 */
	int asl_close_auxiliary_file(int descriptor);
	/**
	 * Sends an ASL message to syslogd along with a title string, Uniform Resource Locator, <br>
	 * and Uniform Type Identifier specified.  Console.app will hyperlink the title string to<br>
	 * the specified URL.  If NULL is supplied as a value for the uti parameter, the default<br>
	 * type "public.data" is used. An object of type ASL_TYPE_MSG. A title string for the file Uniform Type Identifier for the file Uniform Type Locator<br>
	 * @return 0 for success, non-zero for failure<br>
	 * Original signature : <code>int asl_log_auxiliary_location(asl_object_t, const char*, const char*, const char*)</code><br>
	 * <i>native declaration : asl.h:867</i><br>
	 * @deprecated use the safer methods {@link #asl_log_auxiliary_location(vavi.util.logging.jna.asl.AslLibrary.asl_object_t, java.lang.String, java.lang.String, java.lang.String)} and {@link #asl_log_auxiliary_location(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int asl_log_auxiliary_location(Pointer msg, Pointer title, Pointer uti, Pointer url);
	/**
	 * Sends an ASL message to syslogd along with a title string, Uniform Resource Locator, <br>
	 * and Uniform Type Identifier specified.  Console.app will hyperlink the title string to<br>
	 * the specified URL.  If NULL is supplied as a value for the uti parameter, the default<br>
	 * type "public.data" is used. An object of type ASL_TYPE_MSG. A title string for the file Uniform Type Identifier for the file Uniform Type Locator<br>
	 * @return 0 for success, non-zero for failure<br>
	 * Original signature : <code>int asl_log_auxiliary_location(asl_object_t, const char*, const char*, const char*)</code><br>
	 * <i>native declaration : asl.h:867</i>
	 */
	int asl_log_auxiliary_location(AslLibrary.asl_object_t msg, String title, String uti, String url);
	/**
	 * Creates an object of type ASL_TYPE_CLIENT for logging to a file descriptor.<br>
	 * The file must be opened for read and write access.  This routine may be used in conjunction<br>
	 * with asl_create_auxiliary_file() to save ASL format log messages to an auxiliary file.<br>
	 * When logging to the file is complete, the returned object should be released with asl_release().<br>
	 * The file descriptor should be closed using asl_close_auxiliary_file() if it was returned by<br>
	 * asl_create_auxiliary_file(), or close() otherwise.<br>
	 * The returned client object is thread-safe.  It contains a lock that is aquired by<br>
	 * the calling thread.  Note that this may cause unexpected syncronization behavior<br>
	 * if multiple threads log to the returned object, or in applications that use the<br>
	 * object in multiple dispatch queues.<br>
	 * Note that per-message read access controls (ReadUID and ReadGID) and message expire<br>
	 * times (ASLExpireTime) keys have no effect for messages written to this file.<br>
	 * Also note that files are NOT truncated.  This is a change in OS X 10.9 and iOS 7.0.<br>
	 * Previous versions of this routine truncated the file before writing.  Callers<br>
	 * may use ftruncate() to truncate the file if desired.  If an existing non-empty<br>
	 * file is used, it must be an ASL format data file.<br>
	 * @param descriptor A file descriptor<br>
	 * @param ident Sender name<br>
	 * @param facility Facility name<br>
	 * @return An object of type ASL_TYPE_CLIENT.<br>
	 * Original signature : <code>asl_object_t asl_open_from_file(int, const char*, const char*)</code><br>
	 * <i>native declaration : asl.h:899</i><br>
	 * @deprecated use the safer methods {@link #asl_open_from_file(int, java.lang.String, java.lang.String)} and {@link #asl_open_from_file(int, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	AslLibrary.asl_object_t asl_open_from_file(int descriptor, Pointer ident, Pointer facility);
	/**
	 * Creates an object of type ASL_TYPE_CLIENT for logging to a file descriptor.<br>
	 * The file must be opened for read and write access.  This routine may be used in conjunction<br>
	 * with asl_create_auxiliary_file() to save ASL format log messages to an auxiliary file.<br>
	 * When logging to the file is complete, the returned object should be released with asl_release().<br>
	 * The file descriptor should be closed using asl_close_auxiliary_file() if it was returned by<br>
	 * asl_create_auxiliary_file(), or close() otherwise.<br>
	 * The returned client object is thread-safe.  It contains a lock that is aquired by<br>
	 * the calling thread.  Note that this may cause unexpected syncronization behavior<br>
	 * if multiple threads log to the returned object, or in applications that use the<br>
	 * object in multiple dispatch queues.<br>
	 * Note that per-message read access controls (ReadUID and ReadGID) and message expire<br>
	 * times (ASLExpireTime) keys have no effect for messages written to this file.<br>
	 * Also note that files are NOT truncated.  This is a change in OS X 10.9 and iOS 7.0.<br>
	 * Previous versions of this routine truncated the file before writing.  Callers<br>
	 * may use ftruncate() to truncate the file if desired.  If an existing non-empty<br>
	 * file is used, it must be an ASL format data file.<br>
	 * @param descriptor A file descriptor<br>
	 * @param ident Sender name<br>
	 * @param facility Facility name<br>
	 * @result An object of type ASL_TYPE_CLIENT.<br>
	 * Original signature : <code>asl_object_t asl_open_from_file(int, const char*, const char*)</code><br>
	 * <i>native declaration : asl.h:899</i>
	 */
	AslLibrary.asl_object_t asl_open_from_file(int descriptor, String ident, String facility);
	/**
	 * This API provides functionality to use file descriptors to send logging<br>
	 * data to ASL.<br>
	 * asl is retained by ASL and must still be closed by the caller by calling<br>
	 * asl_close() if the caller loses reference to it.  msg is copied by ASL and<br>
	 * similarly must still be freed by the caller by calling asl_free() if the<br>
	 * caller loses reference to it.  Any changes made to it after calling<br>
	 * asl_log_descriptor() are not applicable to the message used. descriptor<br>
	 * is treated differently based on the value of fd_type.<br>
	 * If fd_type is ASL_LOG_DESCRIPTOR_READ, the descriptor must be open for read<br>
	 * access.  ASL uses GCD to read from the descriptor as data becomes available.<br>
	 * These data are line buffered and passed to asl_log.  When EOF is read, the<br>
	 * descriptor is closed.<br>
	 * Example:<br>
	 * asl_log_descriptor(c, m, ASL_LEVEL_NOTICE, STDIN_FILENO, ASL_LOG_DESCRIPTOR_READ);<br>
	 * If fd_type is ASL_LOG_DESCRIPTOR_WRITE, the descriptor is closed and a new<br>
	 * writable descriptor is created with the same fileno.  Any data written to<br>
	 * this new descriptor are line buffered and passed to asl_log.  When EOF is<br>
	 * sent, no further data are read.  The caller is responsible for closing the<br>
	 * new descriptor.  One common use for this API is to redirect writes to stdout<br>
	 * or stderr to ASL by passing STDOUT_FILENO or STDERR_FILENO as descriptor.<br>
	 * Example:<br>
	 * asl_log_descriptor(c, m, ASL_LEVEL_NOTICE, STDOUT_FILENO, ASL_LOG_DESCRIPTOR_WRITE);<br>
	 * asl_log_descriptor(c, m, ASL_LEVEL_ERR, STDERR_FILENO, ASL_LOG_DESCRIPTOR_WRITE);<br>
	 * @param client An ASL object of type ASL_TYPE_CLIENT.<br>
	 * @param msg An asl_object_t of type ASL_TYPE_MSG (default attributes will be supplied if msg is NULL).<br>
	 * @param level Log level (ASL_LEVEL_DEBUG to ASL_LEVEL_EMERG)<br>
	 * @param descriptor An open file descriptor to read from<br>
	 * @param fd_type Either ASL_LOG_DESCRIPTOR_READ or ASL_LOG_DESCRIPTOR_WRITE<br>
	 * @return 0 for success, non-zero for failure<br>
	 * Original signature : <code>int asl_log_descriptor(asl_object_t, asl_object_t, int, int, uint32_t)</code><br>
	 * <i>native declaration : asl.h:943</i><br>
	 * @deprecated use the safer methods {@link #asl_log_descriptor(vavi.util.logging.jna.asl.AslLibrary.asl_object_t, vavi.util.logging.jna.asl.AslLibrary.asl_object_t, int, int, int)} and {@link #asl_log_descriptor(com.sun.jna.Pointer, com.sun.jna.Pointer, int, int, int)} instead
	 */
	@Deprecated 
	int asl_log_descriptor(Pointer asl, Pointer msg, int level, int descriptor, int fd_type);
	/**
	 * This API provides functionality to use file descriptors to send logging<br>
	 * data to ASL.<br>
	 * asl is retained by ASL and must still be closed by the caller by calling<br>
	 * asl_close() if the caller loses reference to it.  msg is copied by ASL and<br>
	 * similarly must still be freed by the caller by calling asl_free() if the<br>
	 * caller loses reference to it.  Any changes made to it after calling<br>
	 * asl_log_descriptor() are not applicable to the message used. descriptor<br>
	 * is treated differently based on the value of fd_type.<br>
	 * If fd_type is ASL_LOG_DESCRIPTOR_READ, the descriptor must be open for read<br>
	 * access.  ASL uses GCD to read from the descriptor as data becomes available.<br>
	 * These data are line buffered and passed to asl_log.  When EOF is read, the<br>
	 * descriptor is closed.<br>
	 * Example:<br>
	 * asl_log_descriptor(c, m, ASL_LEVEL_NOTICE, STDIN_FILENO, ASL_LOG_DESCRIPTOR_READ);<br>
	 * If fd_type is ASL_LOG_DESCRIPTOR_WRITE, the descriptor is closed and a new<br>
	 * writable descriptor is created with the same fileno.  Any data written to<br>
	 * this new descriptor are line buffered and passed to asl_log.  When EOF is<br>
	 * sent, no further data are read.  The caller is responsible for closing the<br>
	 * new descriptor.  One common use for this API is to redirect writes to stdout<br>
	 * or stderr to ASL by passing STDOUT_FILENO or STDERR_FILENO as descriptor.<br>
	 * Example:<br>
	 * asl_log_descriptor(c, m, ASL_LEVEL_NOTICE, STDOUT_FILENO, ASL_LOG_DESCRIPTOR_WRITE);<br>
	 * asl_log_descriptor(c, m, ASL_LEVEL_ERR, STDERR_FILENO, ASL_LOG_DESCRIPTOR_WRITE);<br>
	 * @param client An ASL object of type ASL_TYPE_CLIENT.<br>
	 * @param msg An asl_object_t of type ASL_TYPE_MSG (default attributes will be supplied if msg is NULL).<br>
	 * @param level Log level (ASL_LEVEL_DEBUG to ASL_LEVEL_EMERG)<br>
	 * @param descriptor An open file descriptor to read from<br>
	 * @param fd_type Either ASL_LOG_DESCRIPTOR_READ or ASL_LOG_DESCRIPTOR_WRITE<br>
	 * @return 0 for success, non-zero for failure<br>
	 * Original signature : <code>int asl_log_descriptor(asl_object_t, asl_object_t, int, int, uint32_t)</code><br>
	 * <i>native declaration : asl.h:943</i>
	 */
	int asl_log_descriptor(AslLibrary.asl_object_t asl, AslLibrary.asl_object_t msg, int level, int descriptor, int fd_type);
	/**
	 * Creates a string representation of an ASL message.<br>
	 * This utility creates a character string suitable for printing an ASL message.<br>
	 * The returned string ends with a newline character.  The caller is responsible<br>
	 * for freeing the returned string.<br>
	 * The message is formatted according to the specified format string.  Timestamps<br>
	 * are formatted accoring to the specified time format string.  Special characters<br>
	 * are enoded as specified by the text_encoding parameter.<br>
	 * @param msg An asl_object_t of type ASL_TYPE_MSG.<br>
	 * @param msg_fmt A format specification string.  See "Output file message and time formats"<br>
	 *    for standard formats.  See the syslog(1) man page for more discussion on formats.<br>
	 * @param time_fmt A time format specification string.  See "Output file message and time formats"<br>
	 *    for standard formats.  See the syslog(1) man page for more discussion on time formats.<br>
	 * @param text_encoding Text encoding control (for special characters).  See "Text Encoding Types".<br>
	 * @return a character string, or NULL in case of a failure.<br>
	 * Original signature : <code>char* asl_format(asl_object_t, const char*, const char*, uint32_t)</code><br>
	 * <i>native declaration : asl.h:970</i><br>
	 * @deprecated use the safer methods {@link #asl_format(vavi.util.logging.jna.asl.AslLibrary.asl_object_t, java.lang.String, java.lang.String, int)} and {@link #asl_format(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	Pointer asl_format(Pointer msg, Pointer msg_fmt, Pointer time_fmt, int text_encoding);
	/**
	 * Creates a string representation of an ASL message.<br>
	 * This utility creates a character string suitable for printing an ASL message.<br>
	 * The returned string ends with a newline character.  The caller is responsible<br>
	 * for freeing the returned string.<br>
	 * The message is formatted according to the specified format string.  Timestamps<br>
	 * are formatted accoring to the specified time format string.  Special characters<br>
	 * are enoded as specified by the text_encoding parameter.<br>
	 * @param msg An asl_object_t of type ASL_TYPE_MSG.<br>
	 * @param msg_fmt A format specification string.  See "Output file message and time formats"<br>
	 *    for standard formats.  See the syslog(1) man page for more discussion on formats.<br>
	 * @param time_fmt A time format specification string.  See "Output file message and time formats"<br>
	 *    for standard formats.  See the syslog(1) man page for more discussion on time formats.<br>
	 * @param text_encoding Text encoding control (for special characters).  See "Text Encoding Types".<br>
	 * @return a character string, or NULL in case of a failure.<br>
	 * Original signature : <code>char* asl_format(asl_object_t, const char*, const char*, uint32_t)</code><br>
	 * <i>native declaration : asl.h:970</i>
	 */
	Pointer asl_format(AslLibrary.asl_object_t msg, String msg_fmt, String time_fmt, int text_encoding);
	/**
	 * Encodes a buffer with embedded nul characters into a nul terminated C string.<br>
	 * The result must be freed by the caller.<br>
	 * This utility is used to encode the value associated with ASL_KEY_AUX_DATA<br>
	 * in an ASL_TYPE_MSG object.  An ASL_KEY_AUX_DATA key/value pair is used to hold the<br>
	 * data written to a file descriptor created by asl_create_auxiliary_file on iOS<br>
	 * systems, where the ASL database is stored in memory.<br>
	 * @param buf Pointer to a data buffer.<br>
	 * @param len Length (in octets) of data buffer.<br>
	 * @return an encoded character string.<br>
	 * Original signature : <code>char* asl_encode_buffer(const char*, size_t)</code><br>
	 * <i>native declaration : asl.h:987</i><br>
	 * @deprecated use the safer methods {@link #asl_encode_buffer(java.lang.String, int)} and {@link #asl_encode_buffer(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	Pointer asl_encode_buffer(Pointer buf, int len);
	/**
	 * Encodes a buffer with embedded nul characters into a nul terminated C string.<br>
	 * The result must be freed by the caller.<br>
	 * This utility is used to encode the value associated with ASL_KEY_AUX_DATA<br>
	 * in an ASL_TYPE_MSG object.  An ASL_KEY_AUX_DATA key/value pair is used to hold the<br>
	 * data written to a file descriptor created by asl_create_auxiliary_file on iOS<br>
	 * systems, where the ASL database is stored in memory.<br>
	 * @param buf Pointer to a data buffer.<br>
	 * @param len Length (in octets) of data buffer.<br>
	 * @return an encoded character string.<br>
	 * Original signature : <code>char* asl_encode_buffer(const char*, size_t)</code><br>
	 * <i>native declaration : asl.h:987</i>
	 */
	Pointer asl_encode_buffer(String buf, int len);
	/**
	 * Decodes a C string previously created by asl_encode_buffer back into a buffer,<br>
	 * possibly containing embedded nul characters.  Allocates memory for the buffer<br>
	 * and returns a pointer in an output parameter "buf".<br>
	 * The caller is responsible for freeing the buffer.<br>
	 * This routine should be used to decode the value associated with an<br>
	 * ASL_KEY_AUX_DATA key in an ASL_TYPE_MSG object.<br>
	 * @param in Pointer to nul-terminated string created by asl_encode_buffer.<br>
	 * @param buf (output) Pointer to a newly allocated data buffer.<br>
	 * @param len Length (in octets) of data buffer.<br>
	 * @return 0 on success, non-zero on failure.<br>
	 * Original signature : <code>int asl_decode_buffer(const char*, char**, size_t*)</code><br>
	 * <i>native declaration : asl.h:1006</i><br>
	 * @deprecated use the safer methods {@link #asl_decode_buffer(java.lang.String, com.sun.jna.ptr.PointerByReference, intByReference)} and {@link #asl_decode_buffer(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, intByReference)} instead
	 */
	@Deprecated 
	int asl_decode_buffer(Pointer in, PointerByReference buf, IntByReference len);
	/**
	 * Decodes a C string previously created by asl_encode_buffer back into a buffer,<br>
	 * possibly containing embedded nul characters.  Allocates memory for the buffer<br>
	 * and returns a pointer in an output parameter "buf".<br>
	 * The caller is responsible for freeing the buffer.<br>
	 * This routine should be used to decode the value associated with an<br>
	 * ASL_KEY_AUX_DATA key in an ASL_TYPE_MSG object.<br>
	 * @param in Pointer to nul-terminated string created by asl_encode_buffer.<br>
	 * @param buf (output) Pointer to a newly allocated data buffer.<br>
	 * @param len Length (in octets) of data buffer.<br>
	 * @return 0 on success, non-zero on failure.<br>
	 * Original signature : <code>int asl_decode_buffer(const char*, char**, size_t*)</code><br>
	 * <i>native declaration : asl.h:1006</i>
	 */
	int asl_decode_buffer(String in, PointerByReference buf, IntByReference len);
	/**
	 * Iterate forward through messages in an asl_object_t.<br>
	 * The asl_object_t object maintains an internal position index for the underlying<br>
	 * collection of ASL messages, whether the asl_object_t represents a list, a<br>
	 * data file, or an ASL database.  The position index is moved forward and the<br>
	 * "next" message is returned.<br>
	 * @param obj An asl_object_t.<br>
	 * @return the next message (an object of type ASL_TYPE_MSG or ASL_TYPE_QUERY) from the object,<br>
	 *    which should be of type ASL_TYPE_CLIENT, ASL_TYPE_LIST, ASL_TYPE_STORE, or ASL_TYPE_FILE.<br>
	 *    Returns NULL when there are no more messages or if obj is not a type that holds messages.<br>
	 * Original signature : <code>asl_object_t asl_next(asl_object_t)</code><br>
	 * <i>native declaration : asl.h:1021</i><br>
	 * @deprecated use the safer methods {@link #asl_next(vavi.util.logging.jna.asl.AslLibrary.asl_object_t)} and {@link #asl_next(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	AslLibrary.asl_object_t asl_next(Pointer obj);
	/**
	 * Iterate forward through messages in an asl_object_t.<br>
	 * The asl_object_t object maintains an internal position index for the underlying<br>
	 * collection of ASL messages, whether the asl_object_t represents a list, a<br>
	 * data file, or an ASL database.  The position index is moved forward and the<br>
	 * "next" message is returned.<br>
	 * @param obj An asl_object_t.<br>
	 * @return the next message (an object of type ASL_TYPE_MSG or ASL_TYPE_QUERY) from the object,<br>
	 *    which should be of type ASL_TYPE_CLIENT, ASL_TYPE_LIST, ASL_TYPE_STORE, or ASL_TYPE_FILE.<br>
	 *    Returns NULL when there are no more messages or if obj is not a type that holds messages.<br>
	 * Original signature : <code>asl_object_t asl_next(asl_object_t)</code><br>
	 * <i>native declaration : asl.h:1021</i>
	 */
	AslLibrary.asl_object_t asl_next(AslLibrary.asl_object_t obj);
	/**
	 * Iterate backwards through messages in an asl_object_t.<br>
	 * The asl_object_t object maintains an internal position index for the underlying<br>
	 * collection of ASL messages, whether the asl_object_t represents a list, a<br>
	 * data file, or an ASL database.  The position index is moved backward and the<br>
	 * "previous" message is returned.  <br>
	 * @param data An asl_object_t.<br>
	 * @return the previous message (an object of type ASL_TYPE_MSG or ASL_TYPE_QUERY) from the object,<br>
	 *    which should be of type ASL_TYPE_CLIENT, ASL_TYPE_LIST, ASL_TYPE_STORE, or ASL_TYPE_FILE.<br>
	 *    Returns NULL when there are no more messages or if obj is not a type that holds messages.<br>
	 * Original signature : <code>asl_object_t asl_prev(asl_object_t)</code><br>
	 * <i>native declaration : asl.h:1036</i><br>
	 * @deprecated use the safer methods {@link #asl_prev(vavi.util.logging.jna.asl.AslLibrary.asl_object_t)} and {@link #asl_prev(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	AslLibrary.asl_object_t asl_prev(Pointer obj);
	/**
	 * Iterate backwards through messages in an asl_object_t.<br>
	 * The asl_object_t object maintains an internal position index for the underlying<br>
	 * collection of ASL messages, whether the asl_object_t represents a list, a<br>
	 * data file, or an ASL database.  The position index is moved backward and the<br>
	 * "previous" message is returned.  <br>
	 * @param data An asl_object_t.<br>
	 * @return the previous message (an object of type ASL_TYPE_MSG or ASL_TYPE_QUERY) from the object,<br>
	 *    which should be of type ASL_TYPE_CLIENT, ASL_TYPE_LIST, ASL_TYPE_STORE, or ASL_TYPE_FILE.<br>
	 *    Returns NULL when there are no more messages or if obj is not a type that holds messages.<br>
	 * Original signature : <code>asl_object_t asl_prev(asl_object_t)</code><br>
	 * <i>native declaration : asl.h:1036</i>
	 */
	AslLibrary.asl_object_t asl_prev(AslLibrary.asl_object_t obj);
	/**
	 * Reset internal interation index in an asl_object_t.<br>
	 * @param obj An object of type ASL_TYPE_CLIENT, ASL_TYPE_LIST, ASL_TYPE_STORE, or ASL_TYPE_FILE.<br>
	 * @param position Use 0 to position the internal interation index at the beginning of the asl_object_t object,<br>
	 *    and SIZE_MAX to position it at the end.  Other values of position may cause unpredictable behavior.<br>
	 * Original signature : <code>void asl_reset_iteration(asl_object_t, size_t)</code><br>
	 * <i>native declaration : asl.h:1047</i><br>
	 * @deprecated use the safer methods {@link #asl_reset_iteration(vavi.util.logging.jna.asl.AslLibrary.asl_object_t, int)} and {@link #asl_reset_iteration(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	void asl_reset_iteration(Pointer obj, int position);
	/**
	 * Reset internal interation index in an asl_object_t.<br>
	 * @param obj An object of type ASL_TYPE_CLIENT, ASL_TYPE_LIST, ASL_TYPE_STORE, or ASL_TYPE_FILE.<br>
	 * @param position Use 0 to position the internal interation index at the beginning of the asl_object_t object,<br>
	 *    and SIZE_MAX to position it at the end.  Other values of position may cause unpredictable behavior.<br>
	 * Original signature : <code>void asl_reset_iteration(asl_object_t, size_t)</code><br>
	 * <i>native declaration : asl.h:1047</i>
	 */
	void asl_reset_iteration(AslLibrary.asl_object_t obj, int position);
	/**
	 * Searches an asl_object_t.<br>
	 * The search is controlled by a list of queries, and returns a list with matching messages.<br>
	 * A message is returned if it matches any of the queries in the query list.<br>
	 * A NULL querylist matches anything.<br>
	 * The caller may provide a starting ASL message ID, a direction, and a count.<br>
	 * A start ID value of 0 means that matching should commence at the beginning of the target obj.<br>
	 * A value of SIZE_MAX indicates that matching should commence at the end (most recent message)<br>
	 * in the target.  If a non-zero count value is supplied, the routine will return when it has<br>
	 * found that many messages, or it has checked all messages.  If a non-zero duration is supplied,<br>
	 * the routine will return after the specified time (in microseconds).<br>
	 * If both count and duration are non-zero, the routine will return when the desired number of<br>
	 * items has been matched or when the specified duration has been exceeded, whichever occurs first.<br>
	 * The search direction may be ASL_MATCH_DIRECTION_FORWARD or ASL_MATCH_DIRECTION_REVERSE.<br>
	 * The routine sets the value of the out parameter last to be an index of the last message<br>
	 * checked while matching.  To fetch matching messages in batches (using a small count or<br>
	 * duration value), the start value for each iteration should be set to (last + 1) if searching<br>
	 * forward, or (last - 1)for reverse search.<br>
	 * @param data An asl_object_t object.<br>
	 * @param querylist An asl_object_t object containing zero or more queries.<br>
	 * @param last (output) An internal position index of the last message checked while matching in the asl_object_t object.<br>
	 * @param start A position index specifying where matching should commence.<br>
	 * @param count The maximum number of messages to be returned in the res output list (zero indicates no limit).<br>
	 * @param duration A limit (in microseconds) on the time to be spent searching for results.  Zero indicates no time limit.<br>
	 * @param direction ASL_MATCH_DIRECTION_FORWARD or ASL_MATCH_DIRECTION_REVERSE.<br>
	 * @return an ASL object containing messages matching the querylist, or NULL if there are no matches.<br>
	 * Original signature : <code>asl_object_t asl_match(asl_object_t, asl_object_t, size_t*, size_t, size_t, uint32_t, int32_t)</code><br>
	 * <i>native declaration : asl.h:1085</i><br>
	 * @deprecated use the safer methods {@link #asl_match(vavi.util.logging.jna.asl.AslLibrary.asl_object_t, vavi.util.logging.jna.asl.AslLibrary.asl_object_t, intByReference, int, int, int, int)} and {@link #asl_match(com.sun.jna.Pointer, com.sun.jna.Pointer, intByReference, int, int, int, int)} instead
	 */
	@Deprecated 
	AslLibrary.asl_object_t asl_match(Pointer data, Pointer querylist, IntByReference last, int start, int count, int duration, int direction);
	/**
	 * Searches an asl_object_t.<br>
	 * The search is controlled by a list of queries, and returns a list with matching messages.<br>
	 * A message is returned if it matches any of the queries in the query list.<br>
	 * A NULL querylist matches anything.<br>
	 * The caller may provide a starting ASL message ID, a direction, and a count.<br>
	 * A start ID value of 0 means that matching should commence at the beginning of the target obj.<br>
	 * A value of SIZE_MAX indicates that matching should commence at the end (most recent message)<br>
	 * in the target.  If a non-zero count value is supplied, the routine will return when it has<br>
	 * found that many messages, or it has checked all messages.  If a non-zero duration is supplied,<br>
	 * the routine will return after the specified time (in microseconds).<br>
	 * If both count and duration are non-zero, the routine will return when the desired number of<br>
	 * items has been matched or when the specified duration has been exceeded, whichever occurs first.<br>
	 * The search direction may be ASL_MATCH_DIRECTION_FORWARD or ASL_MATCH_DIRECTION_REVERSE.<br>
	 * The routine sets the value of the out parameter last to be an index of the last message<br>
	 * checked while matching.  To fetch matching messages in batches (using a small count or<br>
	 * duration value), the start value for each iteration should be set to (last + 1) if searching<br>
	 * forward, or (last - 1)for reverse search.<br>
	 * @param data An asl_object_t object.<br>
	 * @param querylist An asl_object_t object containing zero or more queries.<br>
	 * @param last (output) An internal position index of the last message checked while matching in the asl_object_t object.<br>
	 * @param start A position index specifying where matching should commence.<br>
	 * @param count The maximum number of messages to be returned in the res output list (zero indicates no limit).<br>
	 * @param duration A limit (in microseconds) on the time to be spent searching for results.  Zero indicates no time limit.<br>
	 * @param direction ASL_MATCH_DIRECTION_FORWARD or ASL_MATCH_DIRECTION_REVERSE.<br>
	 * @return an ASL object containing messages matching the querylist, or NULL if there are no matches.<br>
	 * Original signature : <code>asl_object_t asl_match(asl_object_t, asl_object_t, size_t*, size_t, size_t, uint32_t, int32_t)</code><br>
	 * <i>native declaration : asl.h:1085</i>
	 */
	AslLibrary.asl_object_t asl_match(AslLibrary.asl_object_t data, AslLibrary.asl_object_t querylist, IntByReference last, int start, int count, int duration, int direction);
	class asl_object_t extends PointerType {
		public asl_object_t(Pointer address) {
			super(address);
		}
		public asl_object_t() {
			super();
		}
	}
}
